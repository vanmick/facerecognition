{"ast":null,"code":"import { deepExtend } from \"../../../../Utils/Utils\";\nconst charKey = \"character\",\n  charAltKey = \"char\",\n  imageKey = \"image\",\n  imageAltKey = \"images\",\n  polygonKey = \"polygon\",\n  polygonAltKey = \"star\";\nexport class Shape {\n  constructor() {\n    this.loadShape = (item, mainKey, altKey, altOverride) => {\n      if (!item) {\n        return;\n      }\n      const isArray = item instanceof Array,\n        emptyValue = isArray ? [] : {},\n        mainDifferentValues = isArray !== this.options[mainKey] instanceof Array,\n        altDifferentValues = isArray !== this.options[altKey] instanceof Array;\n      if (mainDifferentValues) {\n        this.options[mainKey] = emptyValue;\n      }\n      if (altDifferentValues && altOverride) {\n        this.options[altKey] = emptyValue;\n      }\n      this.options[mainKey] = deepExtend(this.options[mainKey] ?? emptyValue, item);\n      if (!this.options[altKey] || altOverride) {\n        this.options[altKey] = deepExtend(this.options[altKey] ?? emptyValue, item);\n      }\n    };\n    this.close = true;\n    this.fill = true;\n    this.options = {};\n    this.type = \"circle\";\n  }\n  get character() {\n    return this.options[charKey] ?? this.options[charAltKey];\n  }\n  set character(value) {\n    this.options[charAltKey] = this.options[charKey] = value;\n  }\n  get custom() {\n    return this.options;\n  }\n  set custom(value) {\n    this.options = value;\n  }\n  get image() {\n    return this.options[imageKey] ?? this.options[imageAltKey];\n  }\n  set image(value) {\n    this.options[imageAltKey] = this.options[imageKey] = value;\n  }\n  get images() {\n    return this.image;\n  }\n  set images(value) {\n    this.image = value;\n  }\n  get polygon() {\n    return this.options[polygonKey] ?? this.options[polygonAltKey];\n  }\n  set polygon(value) {\n    this.options[polygonAltKey] = this.options[polygonKey] = value;\n  }\n  get stroke() {\n    return [];\n  }\n  set stroke(_value) {}\n  load(data) {\n    if (!data) {\n      return;\n    }\n    const options = data.options ?? data.custom;\n    if (options !== undefined) {\n      for (const shape in options) {\n        const item = options[shape];\n        if (item) {\n          this.options[shape] = deepExtend(this.options[shape] ?? {}, item);\n        }\n      }\n    }\n    this.loadShape(data.character, charKey, charAltKey, true);\n    this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n    this.loadShape(data.image ?? data.images, imageKey, imageAltKey, true);\n    if (data.close !== undefined) {\n      this.close = data.close;\n    }\n    if (data.fill !== undefined) {\n      this.fill = data.fill;\n    }\n    if (data.type !== undefined) {\n      this.type = data.type;\n    }\n  }\n}","map":{"version":3,"names":["deepExtend","charKey","charAltKey","imageKey","imageAltKey","polygonKey","polygonAltKey","Shape","constructor","loadShape","item","mainKey","altKey","altOverride","isArray","Array","emptyValue","mainDifferentValues","options","altDifferentValues","close","fill","type","character","value","custom","image","images","polygon","stroke","_value","load","data","undefined","shape"],"sources":["/Users/michaelgedion/Documents/Javascript course/facerecognition/node_modules/tsparticles-engine/esm/Options/Classes/Particles/Shape/Shape.js"],"sourcesContent":["import { deepExtend } from \"../../../../Utils/Utils\";\nconst charKey = \"character\", charAltKey = \"char\", imageKey = \"image\", imageAltKey = \"images\", polygonKey = \"polygon\", polygonAltKey = \"star\";\nexport class Shape {\n    constructor() {\n        this.loadShape = (item, mainKey, altKey, altOverride) => {\n            if (!item) {\n                return;\n            }\n            const isArray = item instanceof Array, emptyValue = isArray ? [] : {}, mainDifferentValues = isArray !== this.options[mainKey] instanceof Array, altDifferentValues = isArray !== this.options[altKey] instanceof Array;\n            if (mainDifferentValues) {\n                this.options[mainKey] = emptyValue;\n            }\n            if (altDifferentValues && altOverride) {\n                this.options[altKey] = emptyValue;\n            }\n            this.options[mainKey] = deepExtend(this.options[mainKey] ?? emptyValue, item);\n            if (!this.options[altKey] || altOverride) {\n                this.options[altKey] = deepExtend(this.options[altKey] ?? emptyValue, item);\n            }\n        };\n        this.close = true;\n        this.fill = true;\n        this.options = {};\n        this.type = \"circle\";\n    }\n    get character() {\n        return (this.options[charKey] ?? this.options[charAltKey]);\n    }\n    set character(value) {\n        this.options[charAltKey] = this.options[charKey] = value;\n    }\n    get custom() {\n        return this.options;\n    }\n    set custom(value) {\n        this.options = value;\n    }\n    get image() {\n        return (this.options[imageKey] ?? this.options[imageAltKey]);\n    }\n    set image(value) {\n        this.options[imageAltKey] = this.options[imageKey] = value;\n    }\n    get images() {\n        return this.image;\n    }\n    set images(value) {\n        this.image = value;\n    }\n    get polygon() {\n        return (this.options[polygonKey] ?? this.options[polygonAltKey]);\n    }\n    set polygon(value) {\n        this.options[polygonAltKey] = this.options[polygonKey] = value;\n    }\n    get stroke() {\n        return [];\n    }\n    set stroke(_value) {\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const options = data.options ?? data.custom;\n        if (options !== undefined) {\n            for (const shape in options) {\n                const item = options[shape];\n                if (item) {\n                    this.options[shape] = deepExtend(this.options[shape] ?? {}, item);\n                }\n            }\n        }\n        this.loadShape(data.character, charKey, charAltKey, true);\n        this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n        this.loadShape(data.image ?? data.images, imageKey, imageAltKey, true);\n        if (data.close !== undefined) {\n            this.close = data.close;\n        }\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}