{"ast":null,"code":"import { executeOnSingleOrMultiple, isInArray } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n  constructor(engine) {\n    this._engine = engine;\n    this.id = \"emitters\";\n  }\n  getPlugin(container) {\n    return new Emitters(this._engine, container);\n  }\n  loadOptions(options, source) {\n    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n      return;\n    }\n    if (source?.emitters) {\n      options.emitters = executeOnSingleOrMultiple(source.emitters, emitter => {\n        const tmp = new Emitter();\n        tmp.load(emitter);\n        return tmp;\n      });\n    }\n    const interactivityEmitters = source?.interactivity?.modes?.emitters;\n    if (interactivityEmitters) {\n      if (interactivityEmitters instanceof Array) {\n        options.interactivity.modes.emitters = {\n          random: {\n            count: 1,\n            enable: true\n          },\n          value: interactivityEmitters.map(s => {\n            const tmp = new Emitter();\n            tmp.load(s);\n            return tmp;\n          })\n        };\n      } else {\n        const emitterMode = interactivityEmitters;\n        if (emitterMode.value !== undefined) {\n          if (emitterMode.value instanceof Array) {\n            options.interactivity.modes.emitters = {\n              random: {\n                count: emitterMode.random.count ?? 1,\n                enable: emitterMode.random.enable ?? false\n              },\n              value: emitterMode.value.map(s => {\n                const tmp = new Emitter();\n                tmp.load(s);\n                return tmp;\n              })\n            };\n          } else {\n            const tmp = new Emitter();\n            tmp.load(emitterMode.value);\n            options.interactivity.modes.emitters = {\n              random: {\n                count: emitterMode.random.count ?? 1,\n                enable: emitterMode.random.enable ?? false\n              },\n              value: tmp\n            };\n          }\n        } else {\n          const emitterOptions = options.interactivity.modes.emitters = {\n            random: {\n              count: 1,\n              enable: false\n            },\n            value: new Emitter()\n          };\n          emitterOptions.value.load(interactivityEmitters);\n        }\n      }\n    }\n  }\n  needsPlugin(options) {\n    if (!options) {\n      return false;\n    }\n    const emitters = options.emitters;\n    return emitters instanceof Array && !!emitters.length || emitters !== undefined || !!options.interactivity?.events?.onClick?.mode && isInArray(\"emitter\", options.interactivity.events.onClick.mode);\n  }\n}\nexport async function loadEmittersPlugin(engine) {\n  if (!engine.emitterShapeManager) {\n    engine.emitterShapeManager = new ShapeManager(engine);\n  }\n  if (!engine.addEmitterShape) {\n    engine.addEmitterShape = (name, shape) => {\n      engine.emitterShapeManager?.addShape(name, shape);\n    };\n  }\n  const plugin = new EmittersPlugin(engine);\n  await engine.addPlugin(plugin);\n  engine.addEmitterShape(\"circle\", new CircleShape());\n  engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";","map":{"version":3,"names":["executeOnSingleOrMultiple","isInArray","CircleShape","Emitter","Emitters","ShapeManager","SquareShape","EmittersPlugin","constructor","engine","_engine","id","getPlugin","container","loadOptions","options","source","needsPlugin","emitters","emitter","tmp","load","interactivityEmitters","interactivity","modes","Array","random","count","enable","value","map","s","emitterMode","undefined","emitterOptions","length","events","onClick","mode","loadEmittersPlugin","emitterShapeManager","addEmitterShape","name","shape","addShape","plugin","addPlugin"],"sources":["/Users/michaelgedion/Documents/Javascript course/facerecognition/node_modules/tsparticles-plugin-emitters/esm/index.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isInArray, } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, (emitter) => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (interactivityEmitters instanceof Array) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    if (emitterMode.value instanceof Array) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((emitters instanceof Array && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(\"emitter\", options.interactivity.events.onClick.mode)));\n    }\n}\nexport async function loadEmittersPlugin(engine) {\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShape) {\n        engine.addEmitterShape = (name, shape) => {\n            engine.emitterShapeManager?.addShape(name, shape);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin);\n    engine.addEmitterShape(\"circle\", new CircleShape());\n    engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}