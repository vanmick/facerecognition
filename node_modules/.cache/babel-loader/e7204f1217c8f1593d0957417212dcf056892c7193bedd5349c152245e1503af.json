{"ast":null,"code":"var _jsxFileName = \"/Users/michaelgedion/Documents/Javascript course/facerecognition/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport { useCallback, useState } from \"react\";\nimport Particles from \"react-particles\";\nimport { loadFull } from \"tsparticles\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\n//import Clarifai from \"clarifai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const setUpClarifai = imageUrl => {\n    const PAT = \"8e71f56b0eaa4646a479f56ae815ef88\";\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = \"vanmicky\";\n    const APP_ID = \"vanmicky\";\n    // Change these to whatever model and image URL you want to use\n    const MODEL_ID = \"face-detection\";\n    const IMAGE_URL = imageUrl;\n    const raw = JSON.stringify({\n      user_app_id: {\n        user_id: USER_ID,\n        app_id: APP_ID\n      },\n      inputs: [{\n        data: {\n          image: {\n            url: IMAGE_URL\n          }\n        }\n      }]\n    });\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: \"Key \" + PAT\n      },\n      body: raw\n    };\n    return requestOptions;\n  };\n  const particlesInit = useCallback(async engine => {\n    console.log(engine);\n    // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n    // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n    // starting from v2 you can add only the features you need reducing the bundle size\n    await loadFull(engine);\n  }, []);\n  const particlesLoaded = useCallback(async container => {\n    await console.log(container);\n  }, []);\n\n  //State\n  const [inputText, setInputText] = useState(\"\");\n  const [ImageUrl, setImageUrl] = useState(\"\");\n  const [box, setBox] = useState({});\n  const calculateFaceLocation = data => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    console.log(width, height);\n  };\n  const onInputChange = event => {\n    setInputText(event.target.value);\n  };\n  const onSubmit = () => {\n    //console.log(\"Click\");\n    setImageUrl(inputText);\n    fetch(\"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/outputs\", setUpClarifai(inputText)).then(response => response.json()).then(result => calculateFaceLocation(result)).catch(error => console.log(\"error\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Particles, {\n      id: \"tsparticles\",\n      init: particlesInit,\n      loaded: particlesLoaded,\n      options: {\n        fpsLimit: 120,\n        interactivity: {\n          events: {\n            onHover: {\n              enable: true,\n              mode: \"repulse\"\n            },\n            resize: true\n          },\n          modes: {\n            push: {\n              quantity: 4\n            },\n            repulse: {\n              distance: 200,\n              duration: 0.4\n            }\n          }\n        },\n        particles: {\n          color: {\n            value: \"#357EDD\"\n          },\n          links: {\n            color: \"#357EDD\",\n            distance: 150,\n            enable: true,\n            opacity: 0.5,\n            width: 1\n          },\n          collisions: {\n            enable: true\n          },\n          move: {\n            direction: \"none\",\n            enable: true,\n            outModes: {\n              default: \"bounce\"\n            },\n            random: false,\n            speed: 2,\n            straight: false\n          },\n          number: {\n            density: {\n              enable: true,\n              area: 800\n            },\n            value: 80\n          },\n          opacity: {\n            value: 0.5\n          },\n          shape: {\n            type: \"circle\"\n          },\n          size: {\n            value: {\n              min: 1,\n              max: 5\n            }\n          }\n        },\n        detectRetina: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n      onInputChange: onInputChange,\n      onSubmit: onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n      ImageUrl: ImageUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aqOKBgLbWdRahgZpLhBYLIW/lAY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navigation","Logo","ImageLinkForm","Rank","useCallback","useState","Particles","loadFull","FaceRecognition","jsxDEV","_jsxDEV","App","_s","setUpClarifai","imageUrl","PAT","USER_ID","APP_ID","MODEL_ID","IMAGE_URL","raw","JSON","stringify","user_app_id","user_id","app_id","inputs","data","image","url","requestOptions","method","headers","Accept","Authorization","body","particlesInit","engine","console","log","particlesLoaded","container","inputText","setInputText","ImageUrl","setImageUrl","box","setBox","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","document","getElementById","width","Number","height","onInputChange","event","target","value","onSubmit","fetch","then","response","json","result","catch","error","className","children","id","init","loaded","options","fpsLimit","interactivity","events","onHover","enable","mode","resize","modes","push","quantity","repulse","distance","duration","particles","color","links","opacity","collisions","move","direction","outModes","default","random","speed","straight","number","density","area","shape","type","size","min","max","detectRetina","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/michaelgedion/Documents/Javascript course/facerecognition/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport { useCallback, useState } from \"react\";\nimport Particles from \"react-particles\";\nimport { loadFull } from \"tsparticles\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\n//import Clarifai from \"clarifai\";\n\nconst App = () => {\n  const setUpClarifai = (imageUrl) => {\n    const PAT = \"8e71f56b0eaa4646a479f56ae815ef88\";\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = \"vanmicky\";\n    const APP_ID = \"vanmicky\";\n    // Change these to whatever model and image URL you want to use\n    const MODEL_ID = \"face-detection\";\n    const IMAGE_URL = imageUrl;\n\n    const raw = JSON.stringify({\n      user_app_id: {\n        user_id: USER_ID,\n        app_id: APP_ID,\n      },\n      inputs: [\n        {\n          data: {\n            image: {\n              url: IMAGE_URL,\n            },\n          },\n        },\n      ],\n    });\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: \"Key \" + PAT,\n      },\n      body: raw,\n    };\n    return requestOptions;\n  };\n\n  const particlesInit = useCallback(async (engine) => {\n    console.log(engine);\n    // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n    // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n    // starting from v2 you can add only the features you need reducing the bundle size\n    await loadFull(engine);\n  }, []);\n\n  const particlesLoaded = useCallback(async (container) => {\n    await console.log(container);\n  }, []);\n\n  //State\n  const [inputText, setInputText] = useState(\"\");\n  const [ImageUrl, setImageUrl] = useState(\"\");\n  const [box, setBox] = useState({});\n\n  const calculateFaceLocation = (data) => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    console.log(width, height);\n  };\n\n  const onInputChange = (event) => {\n    setInputText(event.target.value);\n  };\n\n  const onSubmit = () => {\n    //console.log(\"Click\");\n    setImageUrl(inputText);\n    fetch(\n      \"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/outputs\",\n      setUpClarifai(inputText)\n    )\n      .then((response) => response.json())\n      .then((result) => calculateFaceLocation(result))\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  return (\n    <div className=\"App\">\n      <Particles\n        id=\"tsparticles\"\n        init={particlesInit}\n        loaded={particlesLoaded}\n        options={{\n          fpsLimit: 120,\n          interactivity: {\n            events: {\n              onHover: {\n                enable: true,\n                mode: \"repulse\",\n              },\n              resize: true,\n            },\n            modes: {\n              push: {\n                quantity: 4,\n              },\n              repulse: {\n                distance: 200,\n                duration: 0.4,\n              },\n            },\n          },\n          particles: {\n            color: {\n              value: \"#357EDD\",\n            },\n            links: {\n              color: \"#357EDD\",\n              distance: 150,\n              enable: true,\n              opacity: 0.5,\n              width: 1,\n            },\n            collisions: {\n              enable: true,\n            },\n            move: {\n              direction: \"none\",\n              enable: true,\n              outModes: {\n                default: \"bounce\",\n              },\n              random: false,\n              speed: 2,\n              straight: false,\n            },\n            number: {\n              density: {\n                enable: true,\n                area: 800,\n              },\n              value: 80,\n            },\n            opacity: {\n              value: 0.5,\n            },\n            shape: {\n              type: \"circle\",\n            },\n            size: {\n              value: { min: 1, max: 5 },\n            },\n          },\n          detectRetina: true,\n        }}\n      />\n      <Navigation />\n      <Logo />\n      <Rank />\n      <ImageLinkForm onInputChange={onInputChange} onSubmit={onSubmit} />\n      <FaceRecognition ImageUrl={ImageUrl} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}