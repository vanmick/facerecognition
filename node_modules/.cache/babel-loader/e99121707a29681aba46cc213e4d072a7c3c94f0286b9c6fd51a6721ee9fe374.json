{"ast":null,"code":"import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n  const newValue = newFactor[key];\n  if (newValue !== undefined) {\n    factor[key] = (factor[key] ?? 1) * newValue;\n  }\n}\nexport class Canvas {\n  constructor(container) {\n    this.container = container;\n    this._applyPostDrawUpdaters = particle => {\n      for (const updater of this._postDrawUpdaters) {\n        updater.afterDraw && updater.afterDraw(particle);\n      }\n    };\n    this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\n      for (const updater of this._preDrawUpdaters) {\n        if (updater.getColorStyles) {\n          const {\n            fill,\n            stroke\n          } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n          if (fill) {\n            colorStyles.fill = fill;\n          }\n          if (stroke) {\n            colorStyles.stroke = stroke;\n          }\n        }\n        if (updater.getTransformValues) {\n          const updaterTransform = updater.getTransformValues(particle);\n          for (const key in updaterTransform) {\n            setTransformValue(transform, updaterTransform, key);\n          }\n        }\n        updater.beforeDraw && updater.beforeDraw(particle);\n      }\n    };\n    this._applyResizePlugins = () => {\n      for (const plugin of this._resizePlugins) {\n        plugin.resize && plugin.resize();\n      }\n    };\n    this._getPluginParticleColors = particle => {\n      let fColor, sColor;\n      for (const plugin of this._colorPlugins) {\n        if (!fColor && plugin.particleFillColor) {\n          fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n        }\n        if (!sColor && plugin.particleStrokeColor) {\n          sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n        }\n        if (fColor && sColor) {\n          break;\n        }\n      }\n      return [fColor, sColor];\n    };\n    this._initCover = () => {\n      const options = this.container.actualOptions,\n        cover = options.backgroundMask.cover,\n        color = cover.color,\n        coverRgb = rangeColorToRgb(color);\n      if (coverRgb) {\n        const coverColor = {\n          ...coverRgb,\n          a: cover.opacity\n        };\n        this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n      }\n    };\n    this._initStyle = () => {\n      const element = this.element,\n        options = this.container.actualOptions;\n      if (!element) {\n        return;\n      }\n      if (this._fullScreen) {\n        this._originalStyle = deepExtend({}, element.style);\n        this._setFullScreenStyle();\n      } else {\n        this._resetOriginalStyle();\n      }\n      for (const key in options.style) {\n        if (!key || !options.style) {\n          continue;\n        }\n        const value = options.style[key];\n        if (!value) {\n          continue;\n        }\n        element.style.setProperty(key, value, \"important\");\n      }\n    };\n    this._initTrail = async () => {\n      const options = this.container.actualOptions,\n        trail = options.particles.move.trail,\n        trailFill = trail.fill;\n      if (!trail.enable) {\n        return;\n      }\n      if (trailFill.color) {\n        const fillColor = rangeColorToRgb(trailFill.color);\n        if (!fillColor) {\n          return;\n        }\n        const trail = options.particles.move.trail;\n        this._trailFill = {\n          color: {\n            ...fillColor\n          },\n          opacity: 1 / trail.length\n        };\n      } else {\n        await new Promise((resolve, reject) => {\n          if (!trailFill.image) {\n            return;\n          }\n          const img = document.createElement(\"img\");\n          img.addEventListener(\"load\", () => {\n            this._trailFill = {\n              image: img,\n              opacity: 1 / trail.length\n            };\n            resolve();\n          });\n          img.addEventListener(\"error\", evt => {\n            reject(evt.error);\n          });\n          img.src = trailFill.image;\n        });\n      }\n    };\n    this._paintBase = baseColor => {\n      this.draw(ctx => paintBase(ctx, this.size, baseColor));\n    };\n    this._paintImage = (image, opacity) => {\n      this.draw(ctx => paintImage(ctx, this.size, image, opacity));\n    };\n    this._repairStyle = () => {\n      const element = this.element;\n      if (!element) {\n        return;\n      }\n      this._safeMutationObserver(observer => observer.disconnect());\n      this._initStyle();\n      this.initBackground();\n      this._safeMutationObserver(observer => observer.observe(element, {\n        attributes: true\n      }));\n    };\n    this._resetOriginalStyle = () => {\n      const element = this.element,\n        originalStyle = this._originalStyle;\n      if (!(element && originalStyle)) {\n        return;\n      }\n      const style = element.style;\n      style.position = originalStyle.position;\n      style.zIndex = originalStyle.zIndex;\n      style.top = originalStyle.top;\n      style.left = originalStyle.left;\n      style.width = originalStyle.width;\n      style.height = originalStyle.height;\n    };\n    this._safeMutationObserver = callback => {\n      if (!this._mutationObserver) {\n        return;\n      }\n      callback(this._mutationObserver);\n    };\n    this._setFullScreenStyle = () => {\n      const element = this.element;\n      if (!element) {\n        return;\n      }\n      const priority = \"important\",\n        style = element.style;\n      style.setProperty(\"position\", \"fixed\", priority);\n      style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n      style.setProperty(\"top\", \"0\", priority);\n      style.setProperty(\"left\", \"0\", priority);\n      style.setProperty(\"width\", \"100%\", priority);\n      style.setProperty(\"height\", \"100%\", priority);\n    };\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this._context = null;\n    this._generated = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n    this._mutationObserver = !isSsr() && typeof MutationObserver !== \"undefined\" ? new MutationObserver(records => {\n      for (const record of records) {\n        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n          this._repairStyle();\n        }\n      }\n    }) : undefined;\n  }\n  get _fullScreen() {\n    return this.container.actualOptions.fullScreen.enable;\n  }\n  clear() {\n    const options = this.container.actualOptions,\n      trail = options.particles.move.trail,\n      trailFill = this._trailFill;\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && trailFill) {\n      if (trailFill.color) {\n        this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n      } else if (trailFill.image) {\n        this._paintImage(trailFill.image, trailFill.opacity);\n      }\n    } else {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n  destroy() {\n    this._safeMutationObserver(obs => obs.disconnect());\n    if (this._generated) {\n      const element = this.element;\n      element && element.remove();\n    } else {\n      this._resetOriginalStyle();\n    }\n    this.stop();\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n  draw(cb) {\n    const ctx = this._context;\n    if (!ctx) {\n      return;\n    }\n    return cb(ctx);\n  }\n  drawParticle(particle, delta) {\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n    const radius = particle.getRadius();\n    if (radius <= 0) {\n      return;\n    }\n    const pfColor = particle.getFillColor(),\n      psColor = particle.getStrokeColor() ?? pfColor;\n    let [fColor, sColor] = this._getPluginParticleColors(particle);\n    if (!fColor) {\n      fColor = pfColor;\n    }\n    if (!sColor) {\n      sColor = psColor;\n    }\n    if (!fColor && !sColor) {\n      return;\n    }\n    this.draw(ctx => {\n      const container = this.container,\n        options = container.actualOptions,\n        zIndexOptions = particle.options.zIndex,\n        zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n        opacity = particle.bubble.opacity ?? particle.opacity?.value ?? 1,\n        strokeOpacity = particle.strokeOpacity ?? opacity,\n        zOpacity = opacity * zOpacityFactor,\n        zStrokeOpacity = strokeOpacity * zOpacityFactor,\n        transform = {},\n        colorStyles = {\n          fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n        };\n      colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n      this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n      drawParticle({\n        container,\n        context: ctx,\n        particle,\n        delta,\n        colorStyles,\n        backgroundMask: options.backgroundMask.enable,\n        composite: options.backgroundMask.composite,\n        radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n        opacity: zOpacity,\n        shadow: particle.options.shadow,\n        transform\n      });\n      this._applyPostDrawUpdaters(particle);\n    });\n  }\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => drawParticlePlugin(ctx, plugin, particle, delta));\n  }\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => drawPlugin(ctx, plugin, delta));\n  }\n  async init() {\n    this.resize();\n    this._initStyle();\n    this._initCover();\n    try {\n      await this._initTrail();\n    } catch (e) {\n      console.error(e);\n    }\n    this.initBackground();\n    this._safeMutationObserver(obs => {\n      if (!this.element) {\n        return;\n      }\n      obs.observe(this.element, {\n        attributes: true\n      });\n    });\n    this.initUpdaters();\n    this.initPlugins();\n    this.paint();\n  }\n  initBackground() {\n    const options = this.container.actualOptions,\n      background = options.background,\n      element = this.element;\n    if (!element) {\n      return;\n    }\n    const elementStyle = element.style;\n    if (!elementStyle) {\n      return;\n    }\n    if (background.color) {\n      const color = rangeColorToRgb(background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n  initPlugins() {\n    this._resizePlugins = [];\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.resize) {\n        this._resizePlugins.push(plugin);\n      }\n      if (plugin.particleFillColor || plugin.particleStrokeColor) {\n        this._colorPlugins.push(plugin);\n      }\n    }\n  }\n  initUpdaters() {\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    for (const updater of this.container.particles.updaters) {\n      if (updater.afterDraw) {\n        this._postDrawUpdaters.push(updater);\n      }\n      if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n        this._preDrawUpdaters.push(updater);\n      }\n    }\n  }\n  loadCanvas(canvas) {\n    if (this._generated && this.element) {\n      this.element.remove();\n    }\n    this._generated = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generated;\n    this.element = canvas;\n    this.element.ariaHidden = \"true\";\n    this._originalStyle = deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this._context = this.element.getContext(\"2d\");\n    this._safeMutationObserver(obs => {\n      if (!this.element) {\n        return;\n      }\n      obs.observe(this.element, {\n        attributes: true\n      });\n    });\n    this.container.retina.init();\n    this.initBackground();\n  }\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n        this._paintBase(this._coverColorStyle);\n      } else {\n        this._paintBase();\n      }\n    });\n  }\n  resize() {\n    if (!this.element) {\n      return false;\n    }\n    const container = this.container,\n      pxRatio = container.retina.pixelRatio,\n      size = container.canvas.size,\n      newSize = {\n        width: this.element.offsetWidth * pxRatio,\n        height: this.element.offsetHeight * pxRatio\n      };\n    if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n      return false;\n    }\n    const oldSize = {\n      ...size\n    };\n    this.element.width = size.width = this.element.offsetWidth * pxRatio;\n    this.element.height = size.height = this.element.offsetHeight * pxRatio;\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n    return true;\n  }\n  stop() {\n    this.draw(ctx => clear(ctx, this.size));\n  }\n  async windowResize() {\n    if (!this.element || !this.resize()) {\n      return;\n    }\n    const container = this.container,\n      needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n    this._applyResizePlugins();\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n}","map":{"version":3,"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","paintImage","deepExtend","isSsr","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","generatedAttribute","setTransformValue","factor","newFactor","key","newValue","undefined","Canvas","constructor","container","_applyPostDrawUpdaters","particle","updater","_postDrawUpdaters","afterDraw","_applyPreDrawUpdaters","ctx","radius","zOpacity","colorStyles","transform","_preDrawUpdaters","getColorStyles","fill","stroke","getTransformValues","updaterTransform","beforeDraw","_applyResizePlugins","plugin","_resizePlugins","resize","_getPluginParticleColors","fColor","sColor","_colorPlugins","particleFillColor","particleStrokeColor","_initCover","options","actualOptions","cover","backgroundMask","color","coverRgb","coverColor","a","opacity","_coverColorStyle","_initStyle","element","_fullScreen","_originalStyle","style","_setFullScreenStyle","_resetOriginalStyle","value","setProperty","_initTrail","trail","particles","move","trailFill","enable","fillColor","_trailFill","length","Promise","resolve","reject","image","img","document","createElement","addEventListener","evt","error","src","_paintBase","baseColor","draw","size","_paintImage","_repairStyle","_safeMutationObserver","observer","disconnect","initBackground","observe","attributes","originalStyle","position","zIndex","top","left","width","height","callback","_mutationObserver","priority","fullScreen","toString","_context","_generated","MutationObserver","records","record","type","attributeName","paint","destroy","obs","remove","stop","cb","delta","spawning","destroyed","getRadius","pfColor","getFillColor","psColor","getStrokeColor","zIndexOptions","zOpacityFactor","zIndexFactor","opacityRate","bubble","strokeOpacity","zStrokeOpacity","context","composite","sizeRate","shadow","init","e","console","initUpdaters","initPlugins","background","elementStyle","backgroundColor","backgroundImage","backgroundPosition","backgroundRepeat","repeat","backgroundSize","plugins","push","updaters","loadCanvas","canvas","dataset","ariaHidden","offsetHeight","offsetWidth","getContext","retina","pxRatio","pixelRatio","newSize","oldSize","started","resizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","refresh"],"sources":["/Users/michaelgedion/Documents/Javascript course/facerecognition/node_modules/tsparticles-engine/esm/Core/Canvas.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = (factor[key] ?? 1) * newValue;\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this._applyPostDrawUpdaters = (particle) => {\n            for (const updater of this._postDrawUpdaters) {\n                updater.afterDraw && updater.afterDraw(particle);\n            }\n        };\n        this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\n            for (const updater of this._preDrawUpdaters) {\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n                if (updater.getTransformValues) {\n                    const updaterTransform = updater.getTransformValues(particle);\n                    for (const key in updaterTransform) {\n                        setTransformValue(transform, updaterTransform, key);\n                    }\n                }\n                updater.beforeDraw && updater.beforeDraw(particle);\n            }\n        };\n        this._applyResizePlugins = () => {\n            for (const plugin of this._resizePlugins) {\n                plugin.resize && plugin.resize();\n            }\n        };\n        this._getPluginParticleColors = (particle) => {\n            let fColor, sColor;\n            for (const plugin of this._colorPlugins) {\n                if (!fColor && plugin.particleFillColor) {\n                    fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n                }\n                if (!sColor && plugin.particleStrokeColor) {\n                    sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n                }\n                if (fColor && sColor) {\n                    break;\n                }\n            }\n            return [fColor, sColor];\n        };\n        this._initCover = () => {\n            const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = rangeColorToRgb(color);\n            if (coverRgb) {\n                const coverColor = {\n                    ...coverRgb,\n                    a: cover.opacity,\n                };\n                this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n            }\n        };\n        this._initStyle = () => {\n            const element = this.element, options = this.container.actualOptions;\n            if (!element) {\n                return;\n            }\n            if (this._fullScreen) {\n                this._originalStyle = deepExtend({}, element.style);\n                this._setFullScreenStyle();\n            }\n            else {\n                this._resetOriginalStyle();\n            }\n            for (const key in options.style) {\n                if (!key || !options.style) {\n                    continue;\n                }\n                const value = options.style[key];\n                if (!value) {\n                    continue;\n                }\n                element.style.setProperty(key, value, \"important\");\n            }\n        };\n        this._initTrail = async () => {\n            const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n            if (!trail.enable) {\n                return;\n            }\n            if (trailFill.color) {\n                const fillColor = rangeColorToRgb(trailFill.color);\n                if (!fillColor) {\n                    return;\n                }\n                const trail = options.particles.move.trail;\n                this._trailFill = {\n                    color: {\n                        ...fillColor,\n                    },\n                    opacity: 1 / trail.length,\n                };\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!trailFill.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", () => {\n                        this._trailFill = {\n                            image: img,\n                            opacity: 1 / trail.length,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", (evt) => {\n                        reject(evt.error);\n                    });\n                    img.src = trailFill.image;\n                });\n            }\n        };\n        this._paintBase = (baseColor) => {\n            this.draw((ctx) => paintBase(ctx, this.size, baseColor));\n        };\n        this._paintImage = (image, opacity) => {\n            this.draw((ctx) => paintImage(ctx, this.size, image, opacity));\n        };\n        this._repairStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            this._safeMutationObserver((observer) => observer.disconnect());\n            this._initStyle();\n            this.initBackground();\n            this._safeMutationObserver((observer) => observer.observe(element, { attributes: true }));\n        };\n        this._resetOriginalStyle = () => {\n            const element = this.element, originalStyle = this._originalStyle;\n            if (!(element && originalStyle)) {\n                return;\n            }\n            const style = element.style;\n            style.position = originalStyle.position;\n            style.zIndex = originalStyle.zIndex;\n            style.top = originalStyle.top;\n            style.left = originalStyle.left;\n            style.width = originalStyle.width;\n            style.height = originalStyle.height;\n        };\n        this._safeMutationObserver = (callback) => {\n            if (!this._mutationObserver) {\n                return;\n            }\n            callback(this._mutationObserver);\n        };\n        this._setFullScreenStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            const priority = \"important\", style = element.style;\n            style.setProperty(\"position\", \"fixed\", priority);\n            style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n            style.setProperty(\"top\", \"0\", priority);\n            style.setProperty(\"left\", \"0\", priority);\n            style.setProperty(\"width\", \"100%\", priority);\n            style.setProperty(\"height\", \"100%\", priority);\n        };\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n        this._mutationObserver =\n            !isSsr() && typeof MutationObserver !== \"undefined\"\n                ? new MutationObserver((records) => {\n                    for (const record of records) {\n                        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                            this._repairStyle();\n                        }\n                    }\n                })\n                : undefined;\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && trailFill) {\n            if (trailFill.color) {\n                this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n            }\n            else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        this._safeMutationObserver((obs) => obs.disconnect());\n        if (this._generated) {\n            const element = this.element;\n            element && element.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this.stop();\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return;\n        }\n        return cb(ctx);\n    }\n    drawParticle(particle, delta) {\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = particle.getStrokeColor() ?? pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            const container = this.container, options = container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = particle.bubble.opacity ?? particle.opacity?.value ?? 1, strokeOpacity = particle.strokeOpacity ?? opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => drawParticlePlugin(ctx, plugin, particle, delta));\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => drawPlugin(ctx, plugin, delta));\n    }\n    async init() {\n        this.resize();\n        this._initStyle();\n        this._initCover();\n        try {\n            await this._initTrail();\n        }\n        catch (e) {\n            console.error(e);\n        }\n        this.initBackground();\n        this._safeMutationObserver((obs) => {\n            if (!this.element) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        if (this._generated && this.element) {\n            this.element.remove();\n        }\n        this._generated =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        this._safeMutationObserver((obs) => {\n            if (!this.element) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this._paintBase(this._coverColorStyle);\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return false;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return false;\n        }\n        const oldSize = { ...size };\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n        return true;\n    }\n    stop() {\n        this.draw((ctx) => clear(ctx, this.size));\n    }\n    async windowResize() {\n        if (!this.element || !this.resize()) {\n            return;\n        }\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}