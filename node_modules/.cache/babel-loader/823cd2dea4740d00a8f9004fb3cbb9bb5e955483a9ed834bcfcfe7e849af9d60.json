{"ast":null,"code":"import { executeOnSingleOrMultiple, isInArray } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Absorbers } from \"./Absorbers\";\nclass AbsorbersPlugin {\n  constructor() {\n    this.id = \"absorbers\";\n  }\n  getPlugin(container) {\n    return new Absorbers(container);\n  }\n  loadOptions(options, source) {\n    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n      return;\n    }\n    if (source?.absorbers) {\n      options.absorbers = executeOnSingleOrMultiple(source.absorbers, absorber => {\n        const tmp = new Absorber();\n        tmp.load(absorber);\n        return tmp;\n      });\n    }\n    options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source?.interactivity?.modes?.absorbers, absorber => {\n      const tmp = new Absorber();\n      tmp.load(absorber);\n      return tmp;\n    });\n  }\n  needsPlugin(options) {\n    if (!options) {\n      return false;\n    }\n    const absorbers = options.absorbers;\n    if (absorbers instanceof Array) {\n      return !!absorbers.length;\n    } else if (absorbers) {\n      return true;\n    } else if (options.interactivity?.events?.onClick?.mode && isInArray(\"absorber\", options.interactivity.events.onClick.mode)) {\n      return true;\n    }\n    return false;\n  }\n}\nexport async function loadAbsorbersPlugin(engine) {\n  const plugin = new AbsorbersPlugin();\n  await engine.addPlugin(plugin);\n}\nexport * from \"./AbsorberContainer\";\nexport * from \"./Enums/AbsorberClickMode\";","map":{"version":3,"names":["executeOnSingleOrMultiple","isInArray","Absorber","Absorbers","AbsorbersPlugin","constructor","id","getPlugin","container","loadOptions","options","source","needsPlugin","absorbers","absorber","tmp","load","interactivity","modes","Array","length","events","onClick","mode","loadAbsorbersPlugin","engine","plugin","addPlugin"],"sources":["/Users/michaelgedion/Documents/facerecognition/node_modules/tsparticles-plugin-absorbers/esm/index.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isInArray, } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Absorbers } from \"./Absorbers\";\nclass AbsorbersPlugin {\n    constructor() {\n        this.id = \"absorbers\";\n    }\n    getPlugin(container) {\n        return new Absorbers(container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.absorbers) {\n            options.absorbers = executeOnSingleOrMultiple(source.absorbers, (absorber) => {\n                const tmp = new Absorber();\n                tmp.load(absorber);\n                return tmp;\n            });\n        }\n        options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source?.interactivity?.modes?.absorbers, (absorber) => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const absorbers = options.absorbers;\n        if (absorbers instanceof Array) {\n            return !!absorbers.length;\n        }\n        else if (absorbers) {\n            return true;\n        }\n        else if (options.interactivity?.events?.onClick?.mode &&\n            isInArray(\"absorber\", options.interactivity.events.onClick.mode)) {\n            return true;\n        }\n        return false;\n    }\n}\nexport async function loadAbsorbersPlugin(engine) {\n    const plugin = new AbsorbersPlugin();\n    await engine.addPlugin(plugin);\n}\nexport * from \"./AbsorberContainer\";\nexport * from \"./Enums/AbsorberClickMode\";\n"],"mappings":"AAAA,SAASA,yBAAyB,EAAEC,SAAS,QAAS,oBAAoB;AAC1E,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,SAAS,QAAQ,aAAa;AACvC,MAAMC,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,EAAE,GAAG,WAAW;EACzB;EACAC,SAASA,CAACC,SAAS,EAAE;IACjB,OAAO,IAAIL,SAAS,CAACK,SAAS,CAAC;EACnC;EACAC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAE;IACzB,IAAI,CAAC,IAAI,CAACC,WAAW,CAACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAACE,WAAW,CAACD,MAAM,CAAC,EAAE;MACzD;IACJ;IACA,IAAIA,MAAM,EAAEE,SAAS,EAAE;MACnBH,OAAO,CAACG,SAAS,GAAGb,yBAAyB,CAACW,MAAM,CAACE,SAAS,EAAGC,QAAQ,IAAK;QAC1E,MAAMC,GAAG,GAAG,IAAIb,QAAQ,CAAC,CAAC;QAC1Ba,GAAG,CAACC,IAAI,CAACF,QAAQ,CAAC;QAClB,OAAOC,GAAG;MACd,CAAC,CAAC;IACN;IACAL,OAAO,CAACO,aAAa,CAACC,KAAK,CAACL,SAAS,GAAGb,yBAAyB,CAACW,MAAM,EAAEM,aAAa,EAAEC,KAAK,EAAEL,SAAS,EAAGC,QAAQ,IAAK;MACrH,MAAMC,GAAG,GAAG,IAAIb,QAAQ,CAAC,CAAC;MAC1Ba,GAAG,CAACC,IAAI,CAACF,QAAQ,CAAC;MAClB,OAAOC,GAAG;IACd,CAAC,CAAC;EACN;EACAH,WAAWA,CAACF,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,EAAE;MACV,OAAO,KAAK;IAChB;IACA,MAAMG,SAAS,GAAGH,OAAO,CAACG,SAAS;IACnC,IAAIA,SAAS,YAAYM,KAAK,EAAE;MAC5B,OAAO,CAAC,CAACN,SAAS,CAACO,MAAM;IAC7B,CAAC,MACI,IAAIP,SAAS,EAAE;MAChB,OAAO,IAAI;IACf,CAAC,MACI,IAAIH,OAAO,CAACO,aAAa,EAAEI,MAAM,EAAEC,OAAO,EAAEC,IAAI,IACjDtB,SAAS,CAAC,UAAU,EAAES,OAAO,CAACO,aAAa,CAACI,MAAM,CAACC,OAAO,CAACC,IAAI,CAAC,EAAE;MAClE,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;AACJ;AACA,OAAO,eAAeC,mBAAmBA,CAACC,MAAM,EAAE;EAC9C,MAAMC,MAAM,GAAG,IAAItB,eAAe,CAAC,CAAC;EACpC,MAAMqB,MAAM,CAACE,SAAS,CAACD,MAAM,CAAC;AAClC;AACA,cAAc,qBAAqB;AACnC,cAAc,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}