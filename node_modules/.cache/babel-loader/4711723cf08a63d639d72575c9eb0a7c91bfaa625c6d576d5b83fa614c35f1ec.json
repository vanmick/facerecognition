{"ast":null,"code":"import { errorPrefix, getStyleFromHsl } from \"tsparticles-engine\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n  const {\n    svgData\n  } = imageShape;\n  if (!svgData) {\n    return \"\";\n  }\n  const colorStyle = getStyleFromHsl(color, opacity);\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, () => colorStyle);\n  }\n  const preFillIndex = svgData.indexOf(\">\");\n  return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n  return new Promise(resolve => {\n    image.loading = true;\n    const img = new Image();\n    image.element = img;\n    img.addEventListener(\"load\", () => {\n      image.loading = false;\n      resolve();\n    });\n    img.addEventListener(\"error\", () => {\n      image.element = undefined;\n      image.error = true;\n      image.loading = false;\n      console.error(`${errorPrefix} loading image: ${image.source}`);\n      resolve();\n    });\n    img.src = image.source;\n  });\n}\nexport async function downloadSvgImage(image) {\n  if (image.type !== \"svg\") {\n    await loadImage(image);\n    return;\n  }\n  image.loading = true;\n  const response = await fetch(image.source);\n  if (!response.ok) {\n    console.error(`${errorPrefix} Image not found`);\n    image.error = true;\n  }\n  if (!image.error) {\n    image.svgData = await response.text();\n  }\n  image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n  const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1),\n    imageRes = {\n      color,\n      data: {\n        ...image,\n        svgData: svgColoredData\n      },\n      loaded: false,\n      ratio: imageData.width / imageData.height,\n      replaceColor: imageData.replaceColor ?? imageData.replace_color,\n      source: imageData.src\n    };\n  return new Promise(resolve => {\n    const svg = new Blob([svgColoredData], {\n        type: \"image/svg+xml\"\n      }),\n      domUrl = URL || window.URL || window.webkitURL || window,\n      url = domUrl.createObjectURL(svg),\n      img = new Image();\n    img.addEventListener(\"load\", () => {\n      imageRes.loaded = true;\n      imageRes.element = img;\n      resolve(imageRes);\n      domUrl.revokeObjectURL(url);\n    });\n    img.addEventListener(\"error\", async () => {\n      domUrl.revokeObjectURL(url);\n      const img2 = {\n        ...image,\n        error: false,\n        loading: true\n      };\n      await loadImage(img2);\n      imageRes.loaded = true;\n      imageRes.element = img2.element;\n      resolve(imageRes);\n    });\n    img.src = url;\n  });\n}","map":{"version":3,"names":["errorPrefix","getStyleFromHsl","currentColorRegex","replaceColorSvg","imageShape","color","opacity","svgData","colorStyle","includes","replace","preFillIndex","indexOf","substring","loadImage","image","Promise","resolve","loading","img","Image","element","addEventListener","undefined","error","console","source","src","downloadSvgImage","type","response","fetch","ok","text","replaceImageColor","imageData","particle","svgColoredData","value","imageRes","data","loaded","ratio","width","height","replaceColor","replace_color","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","revokeObjectURL","img2"],"sources":["/Users/michaelgedion/Documents/Javascript course/facerecognition/node_modules/tsparticles-shape-image/esm/Utils.js"],"sourcesContent":["import { errorPrefix, getStyleFromHsl } from \"tsparticles-engine\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            console.error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        console.error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    if (!image.error) {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\n        color,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}