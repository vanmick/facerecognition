{"ast":null,"code":"import { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { calcPositionFromSize } from \"../Utils/NumberUtils\";\nimport { errorPrefix } from \"./Utils/Constants\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = canvasSize => {\n  return new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2);\n};\nexport class Particles {\n  constructor(engine, container) {\n    this._applyDensity = (options, manualCount, group) => {\n      if (!options.number.density?.enable) {\n        return;\n      }\n      const numberOptions = options.number,\n        densityFactor = this._initDensityFactor(numberOptions.density),\n        optParticlesNumber = numberOptions.value,\n        optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n        particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n        particlesCount = Math.min(this.count, this._array.filter(t => t.group === group).length);\n      this.limit = numberOptions.limit * densityFactor;\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    };\n    this._initDensityFactor = densityOptions => {\n      const container = this._container;\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n      const canvas = container.canvas.element,\n        pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    };\n    this._pushParticle = (position, overrideOptions, group, initializer) => {\n      try {\n        let particle = this.pool.pop();\n        if (particle) {\n          particle.init(this._nextId, position, overrideOptions, group);\n        } else {\n          particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n        }\n        let canAdd = true;\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n        if (!canAdd) {\n          return;\n        }\n        this._array.push(particle);\n        this._zArray.push(particle);\n        this._nextId++;\n        this._engine.dispatchEvent(\"particleAdded\", {\n          container: this._container,\n          data: {\n            particle\n          }\n        });\n        return particle;\n      } catch (e) {\n        console.warn(`${errorPrefix} adding particle: ${e}`);\n        return;\n      }\n    };\n    this._engine = engine;\n    this._container = container;\n    this._nextId = 0;\n    this._array = [];\n    this._zArray = [];\n    this.pool = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this._interactionManager = new InteractionManager(this._engine, this._container);\n    const canvasSize = this._container.canvas.size;\n    this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n    this.movers = this._engine.plugins.getMovers(this._container, true);\n    this.updaters = this._engine.plugins.getUpdaters(this._container, true);\n  }\n  get count() {\n    return this._array.length;\n  }\n  addManualParticles() {\n    const container = this._container,\n      options = container.actualOptions;\n    for (const particle of options.manualParticles) {\n      this.addParticle(particle.position ? particle.position.mode === \"precise\" ? particle.position : calcPositionFromSize({\n        size: container.canvas.size,\n        position: particle.position\n      }) : undefined, particle.options);\n    }\n  }\n  addParticle(position, overrideOptions, group, initializer) {\n    const container = this._container,\n      options = container.actualOptions,\n      limit = options.particles.number.limit;\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n    return this._pushParticle(position, overrideOptions, group, initializer);\n  }\n  clear() {\n    this._array = [];\n    this._zArray = [];\n  }\n  destroy() {\n    this._array = [];\n    this._zArray = [];\n    this.movers = [];\n    this.updaters = [];\n  }\n  async draw(delta) {\n    const container = this._container,\n      canvasSize = this._container.canvas.size;\n    this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n    container.canvas.clear();\n    await this.update(delta);\n    if (this.needsSort) {\n      this._zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this._zArray[this._zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n    for (const p of this._zArray) {\n      p.draw(delta);\n    }\n  }\n  filter(condition) {\n    return this._array.filter(condition);\n  }\n  find(condition) {\n    return this._array.find(condition);\n  }\n  handleClickMode(mode) {\n    this._interactionManager.handleClickMode(mode);\n  }\n  init() {\n    const container = this._container,\n      options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    let handled = false;\n    this.updaters = this._engine.plugins.getUpdaters(container, true);\n    this._interactionManager.init();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n      if (handled) {\n        break;\n      }\n    }\n    this._interactionManager.init();\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.init(container);\n    }\n    this.addManualParticles();\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n        for (let i = this.count, j = 0; j < groupOptions.number?.value && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n  }\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse?.position, overrideOptions, group);\n    }\n    this.pushing = false;\n  }\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n  remove(particle, group, override) {\n    this.removeAt(this._array.indexOf(particle), undefined, group, override);\n  }\n  removeAt(index) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let group = arguments.length > 2 ? arguments[2] : undefined;\n    let override = arguments.length > 3 ? arguments[3] : undefined;\n    if (index < 0 || index > this.count) {\n      return;\n    }\n    let deleted = 0;\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this._array[i];\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n      particle.destroy(override);\n      this._array.splice(i--, 1);\n      const zIdx = this._zArray.indexOf(particle);\n      this._zArray.splice(zIdx, 1);\n      this.pool.push(particle);\n      deleted++;\n      this._engine.dispatchEvent(\"particleRemoved\", {\n        container: this._container,\n        data: {\n          particle\n        }\n      });\n    }\n  }\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n  setDensity() {\n    const options = this._container.actualOptions,\n      groups = options.particles.groups;\n    for (const group in groups) {\n      this._applyDensity(groups[group], 0, group);\n    }\n    this._applyDensity(options.particles, options.manualParticles.length);\n  }\n  async update(delta) {\n    const container = this._container,\n      particlesToDelete = new Set();\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.update();\n    }\n    for (const [, plugin] of container.plugins) {\n      plugin.update && plugin.update(delta);\n    }\n    for (const particle of this._array) {\n      const resizeFactor = container.canvas.resizeFactor;\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n        particle.initialPosition.x *= resizeFactor.width;\n        particle.initialPosition.y *= resizeFactor.height;\n      }\n      particle.ignoresResizeRatio = false;\n      await this._interactionManager.reset(particle);\n      for (const [, plugin] of this._container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n      for (const mover of this.movers) {\n        if (mover.isEnabled(particle)) {\n          mover.move(particle, delta);\n        }\n      }\n      if (particle.destroyed) {\n        particlesToDelete.add(particle);\n        continue;\n      }\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n    this._array = this._array.filter(t => !particlesToDelete.has(t));\n    await this._interactionManager.externalInteract(delta);\n    for (const particle of this._array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n      if (!particle.destroyed && !particle.spawning) {\n        await this._interactionManager.particlesInteract(particle, delta);\n      }\n    }\n    delete container.canvas.resizeFactor;\n  }\n}","map":{"version":3,"names":["InteractionManager","Particle","Point","QuadTree","Rectangle","calcPositionFromSize","errorPrefix","qTreeCapacity","qTreeRectangle","canvasSize","width","height","Particles","constructor","engine","container","_applyDensity","options","manualCount","group","number","density","enable","numberOptions","densityFactor","_initDensityFactor","optParticlesNumber","value","optParticlesLimit","limit","particlesNumber","Math","min","particlesCount","count","_array","filter","t","length","push","abs","undefined","removeQuantity","densityOptions","_container","canvas","element","pxRatio","retina","pixelRatio","factor","area","_pushParticle","position","overrideOptions","initializer","particle","pool","pop","init","_nextId","_engine","canAdd","_zArray","dispatchEvent","data","e","console","warn","needsSort","lastZIndex","_interactionManager","size","quadTree","movers","plugins","getMovers","updaters","getUpdaters","addManualParticles","actualOptions","manualParticles","addParticle","mode","particles","countToRemove","clear","destroy","draw","delta","update","sort","a","b","z","id","plugin","drawPlugin","p","condition","find","handleClickMode","handled","particlesInitialization","pathGenerator","pathGenerators","groups","groupOptions","i","j","nb","mouse","pushing","redraw","remove","override","removeAt","indexOf","index","quantity","arguments","deleted","splice","zIdx","setDensity","particlesToDelete","Set","resizeFactor","ignoresResizeRatio","x","y","initialPosition","reset","destroyed","particleUpdate","mover","isEnabled","move","add","insert","getPosition","has","externalInteract","updater","spawning","particlesInteract"],"sources":["/Users/michaelgedion/Documents/facerecognition/node_modules/tsparticles-engine/esm/Core/Particles.js"],"sourcesContent":["import { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { calcPositionFromSize } from \"../Utils/NumberUtils\";\nimport { errorPrefix } from \"./Utils/Constants\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = (canvasSize) => {\n    return new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._applyDensity = (options, manualCount, group) => {\n            if (!options.number.density?.enable) {\n                return;\n            }\n            const numberOptions = options.number, densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this._array.filter((t) => t.group === group).length);\n            this.limit = numberOptions.limit * densityFactor;\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions) => {\n            const container = this._container;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return 1;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this.pool.pop();\n                if (particle) {\n                    particle.init(this._nextId, position, overrideOptions, group);\n                }\n                else {\n                    particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n                }\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(\"particleAdded\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                console.warn(`${errorPrefix} adding particle: ${e}`);\n                return;\n            }\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this.pool = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this._interactionManager = new InteractionManager(this._engine, this._container);\n        const canvasSize = this._container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = this._engine.plugins.getMovers(this._container, true);\n        this.updaters = this._engine.plugins.getUpdaters(this._container, true);\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(particle.position\n                ? particle.position.mode === \"precise\"\n                    ? particle.position\n                    : calcPositionFromSize({\n                        size: container.canvas.size,\n                        position: particle.position,\n                    })\n                : undefined, particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const container = this._container, options = container.actualOptions, limit = options.particles.number.limit;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this._container, canvasSize = this._container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        container.canvas.clear();\n        await this.update(delta);\n        if (this.needsSort) {\n            this._zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this._zArray[this._zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    init() {\n        const container = this._container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        let handled = false;\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n        this._interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (index < 0 || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this._array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this._array.splice(i--, 1);\n            const zIdx = this._zArray.indexOf(particle);\n            this._zArray.splice(zIdx, 1);\n            this.pool.push(particle);\n            deleted++;\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups;\n        for (const group in groups) {\n            this._applyDensity(groups[group], 0, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    async update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.update && plugin.update(delta);\n        }\n        for (const particle of this._array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        this._array = this._array.filter((t) => !particlesToDelete.has(t));\n        await this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}